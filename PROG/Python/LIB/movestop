#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from std_msgs.msg import Int64MultiArray
import numpy as np

        

def legation(angles,angles_off,direction,angles_check):
    b='MOVE'
    '''etape 1'''
    '''angles = matrice contenant les angles calcules pour le deplacement'''
    a=np.copy(angles)
    a[:,2]=a[:,2]-a[2,1]

    '''etape 2&3'''
    '''angles_off = matrice contenant les offsets des angles des moteurs'''
    '''direction = matrice de 1 et -1 indiquant le sens'''
    a=a*direction-angles_off

    '''etape 4'''
    '''angles_check = matrice contenant les angles min et max theoriquement possible'''
    c=np.copy(angles_check)
    if  ( (c[:,:,0]>a).any() ) or ( (c[:,:,1]<a).any() ):
        '''stop'''
        b='STOP'
        ''' de base vaut 0'''        
    return a , b


class Robot_control:
    
    def __init__(self):

        self.command='STOP'
        self.angles_off=angles_off
        self.direction=direction
        self.angles_check=angles_check
        self.pub = rospy.Publisher('angle', 'numpy.ndarray',queue_size =1)
        self.pub2 = rospy.Publisher('cmd', String ,queue_size =1)
        
        self.subscriber = rospy.Subscriber('cmd', Sring, self.update_cmd)
        rospy.init_node('angle_ctrl')

    def update_cmd(self, b):
        self.command=b.data

    def run(self):
        r=rospy.Rate(10)
        while not rospy.is_shutdown():
            angles = rospy.Subscriber('angle_raw', 'numpy.ndarray',queue_size =1)
            a , b = legation(angles,angles_off,direction,angles_check)
            self.pub2.publish(update_cmd(self,b))
            if self.command !='STOP':
                self.pub.publish(a)
     

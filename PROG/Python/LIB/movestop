#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from std_msgs.msg import Float64MultiArray
import numpy as np
import re
        
def parsse('data.txt'):
    with open('data.txt') as inf:
	angles_off= np.zeros([6,3],float)
	direction= np.zeros([6,3],float)
	angles_check= np.zeros([6,3,2],float)
	for line in inf:
		line = line.split('&')
		line[0] = line[0].strip()
		if line[0] == 'angles_off':
              angles_off= [[float(line[1]),float(line[2]),float(line[3])],[float(line[4]),float(line[5]),float(line[6])],[float(line[7]),float(line[8]),float(line[9])],[float(line[10]),float(line[11]),float(line[12])],[float(line[13]),float(line[14]),float(line[15])],[float(line[16]),float(line[17]),float(line[18])]]
		elif line[0] == 'direction':
              direction= [[float(line[1]),float(line[2]),float(line[3])],[float(line[4]),float(line[5]),float(line[6])],[float(line[7]),float(line[8]),float(line[9])],[float(line[10]),float(line[11]),float(line[12])],[float(line[13]),float(line[14]),float(line[15])],[float(line[16]),float(line[17]),float(line[18])]]
		elif line[0] == 'angles_checkmin':
              angles_check[0]= [[float(line[1]),float(line[2]),float(line[3])],[float(line[4]),float(line[5]),float(line[6])],[float(line[7]),float(line[8]),float(line[9])],[float(line[10]),float(line[11]),float(line[12])],[float(line[13]),float(line[14]),float(line[15])],[float(line[16]),float(line[17]),float(line[18])]]
		elif line[0] == 'angles_checkmax':              
              angles_check[1]= [[float(line[1]),float(line[2]),float(line[3])],[float(line[4]),float(line[5]),float(line[6])],[float(line[7]),float(line[8]),float(line[9])],[float(line[10]),float(line[11]),float(line[12])],[float(line[13]),float(line[14]),float(line[15])],[float(line[16]),float(line[17]),float(line[18])]]
        return angles_off , direction , angles_check

    
def legation(angles,angles_off,direction,angles_check):
    b='MOVE'
    '''etape 1'''
    '''angles = matrice contenant les angles calcules pour le deplacement'''
    a=np.copy(angles)
    a[:,2]=a[:,2]-a[2,1]

    '''etape 2&3'''
    '''angles_off = matrice contenant les offsets des angles des moteurs'''
    '''direction = matrice de 1 et -1 indiquant le sens'''
    a=a*direction-angles_off

    '''etape 4'''
    '''angles_check = matrice contenant les angles min et max theoriquement possible'''
    c=np.copy(angles_check)
    if  ( (c[:,:,0]>a).any() ) or ( (c[:,:,1]<a).any() ):
        '''stop'''
        b='STOP'
        ''' de base vaut 0'''        
    return a , b


class Robot_control:
    
    def __init__(self):

        self.command='STOP'
        aa , bb ,cc = parsse('data.txt')
        self.angles_off=aa
        self.direction=bb
        self.angles_check=cc
        
        self.pub = rospy.Publisher('angle', Float64MultiArray,queue_size =1)
        self.pub2 = rospy.Publisher('cmd', String ,queue_size =1)
        
        self.subscriber_cmd = rospy.Subscriber('cmd', String, self.update_cmd)
        self.subscriber_angles = rospy.Subscriber('angle_raw', Float64MultiArray, self.check_angles)
        rospy.init_node('angle_ctrl')

    def update_cmd(self, b):
        self.command=b.data

    def check_angles(self, angles_msg):
        a , b = legation(angles_msg.data,angles_off,direction,angles_check)
        self.command = b
        self.pub2.publish()
        if self.command !='STOP':
            self.pub.publish(a)
